.free
    EQUB LO(end), HI(end)
.freeHeapSize
    EQUB 128

.freeAlloc
    LDA #0
    CMP free
    BNE freeAlloc_notnil
    CMP free + 1
    BEQ free_outofmemory
.freeAlloc_notnil
    MOVE ret, free
    TAIL free, ret
    LDA #0
    LDY #0
    STA (ret), Y
    INY
    STA (ret), Y
    INY
    STA (ret), Y
    INY
    STA (ret), Y
    RTS
.free_outofmemory
    BRK
    EQUB 0, "Out of memory", 0

.freeCollect
    TXA
    PHA
    LDA #0
    STA free
    STA free + 1
    ADDR tmp, end
    LDX freeHeapSize
.freeCollect_loop
    LDY #0
    LDA (tmp), Y
    BIT freeMark_mask
    BNE freeCollect_skip

    TAILSET tmp, free
    MOVE free, tmp
.freeCollect_next
    LDA #32
    CLC
    ADC tmp
    STA tmp
    LDA #0
    ADC tmp + 1
    STA tmp + 1
    DEX
    BNE freeCollect_loop
    PLA
    TAX
    RTS
.freeCollect_skip
    AND #&FE ; clear mark
    STA (tmp), Y
    JMP freeCollect_next

.freeGC_sp
    EQUB 0
.freeGC
    STX freeGC_sp
.freeGC_loop
    LDY freeGC_sp
    BEQ freeGC_end
    DEY
    STY freeGC_sp
    LDA stack_low, Y
    STA exp
    LDA stack_high, Y
    STA exp + 1
    JSR freeMark
    JMP freeGC_loop
.freeGC_end
    JMP freeCollect


.freeInit
    ADDR tmp, end
    LDY #0
    LDX freeHeapSize
.freeInit_loop
    LDA #0 ; clear marked
    STA (tmp), Y
    LDA #32
    CLC
    ADC tmp
    STA tmp
    LDA #0
    ADC tmp + 1
    STA tmp + 1
    DEX
    BNE freeInit_loop

    JSR freeCollect
    RTS

.freeMark_mask
    EQUB 1
.freeMark
    LDA #0
    CMP exp
    BNE freeMark_notnil
    CMP exp + 1
    BNE freeMark_notnil
    RTS
.freeMark_notnil
    LDY #0
    LDA (exp), Y
    BIT freeMark_mask
    BNE freeMark_done

    JSR getType
    LDA freeMark_jumphigh, Y
    PHA
    LDA freeMark_jumplow, Y
    PHA
.freeMark_done
    RTS
.freeMark_jumplow ; perhaps jump table is overkill here
    EQUB LO(freeMark_done - 1)
    EQUB LO(freeMark_cons - 1)
    EQUB LO(freeMark_mark - 1)
    EQUB LO(freeMark_mark - 1)
    EQUB LO(freeMark_mark - 1)
    EQUB LO(freeMark_mark - 1)
    EQUB LO(freeMark_mark - 1)
.freeMark_jumphigh
    EQUB HI(freeMark_done - 1)
    EQUB HI(freeMark_cons - 1)
    EQUB HI(freeMark_mark - 1)
    EQUB HI(freeMark_mark - 1)
    EQUB HI(freeMark_mark - 1)
    EQUB HI(freeMark_mark - 1)
    EQUB HI(freeMark_mark - 1)

.freeMark_mark
    LDY #0
    LDA #1
    ORA (exp), Y
    STA (exp), Y
    RTS

.freeMark_cons
    PUSH exp
    HEAD tmp, exp
    LDY #0
    LDA #1
    ORA (exp), Y
    STA (exp), Y
    MOVE exp, tmp
    JSR freeMark
    PULL tmp
    TAIL exp, tmp
    JMP freeMark


.freeReport
    LDA #'F'
    JSR osasci
    LDA #'r'
    JSR osasci
    LDA #'e'
    JSR osasci
    LDA #'e'
    JSR osasci
    LDA #' '
    JSR osasci
    MOVE exp, free
    JSR native_len
    JSR printDecimal

    LDA #',' ; print stack
    JSR osasci
    LDA #' '
    JSR osasci
    TXA
    JSR printDecimal

    JSR osnewl
    RTS

.native_len_count
    EQUB 0
.native_len ; A = len(exp)
    LDA #0
    STA native_len_count
.native_len_loop
    LDA #0
    CMP exp
    BNE native_len_next
    CMP exp + 1
    BNE native_len_next
    LDA native_len_count
    RTS
.native_len_next
    INC native_len_count
    TAIL exp, exp
    JMP native_len_loop
