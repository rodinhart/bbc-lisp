.print
    JSR getType
    LDA print_jumphigh, Y
    PHA
    LDA print_jumplow, Y
    PHA
    RTS
.print_jumplow
    EQUB LO(print_nil - 1)
    EQUB LO(print_cons - 1)
    EQUB LO(print_proc - 1)
    EQUB LO(print_macro - 1)
    EQUB LO(print_native - 1)
    EQUB LO(print_symbol - 1)
    EQUB LO(print_number - 1)
.print_jumphigh
    EQUB HI(print_nil - 1)
    EQUB HI(print_cons - 1)
    EQUB HI(print_proc - 1)
    EQUB HI(print_macro - 1)
    EQUB HI(print_native - 1)
    EQUB HI(print_symbol - 1)
    EQUB HI(print_number - 1)

.print_nil
    LDA #'n'
    JSR osasci
    LDA #'i'
    JSR osasci
    LDA #'l'
    JSR osasci
    RTS

.print_cons
    LDA #'('
    JSR osasci
    LDA #0
    PHA
.print_loop
    PLA
    JSR osasci
    LDA #' '
    PHA

    PUSH exp

    HEAD exp, exp
    JSR print

    PULL tmp
    TAIL exp, tmp

    ; nil?
    LDA #0
    CMP exp
    BNE print_loop
    CMP exp + 1
    BNE print_loop
.print_close
    PLA
    LDA #')'
    JSR osasci
    RTS

.print_proc
    LDA #'['
    JSR osasci
    LDA #'P'
    JSR osasci
    LDA #'R'
    JSR osasci
    LDA #'O'
    JSR osasci
    LDA #'C'
    JSR osasci
    LDA #']'
    JSR osasci
    RTS

.print_macro
    LDA #'['
    JSR osasci
    LDA #'M'
    JSR osasci
    LDA #'A'
    JSR osasci
    LDA #'C'
    JSR osasci
    LDA #'R'
    JSR osasci
    LDA #'O'
    JSR osasci
    LDA #']'
    JSR osasci
    RTS

.print_native
    LDA #'['
    JSR osasci
    LDA #'N'
    JSR osasci
    LDA #'A'
    JSR osasci
    LDA #'T'
    JSR osasci
    LDA #']'
    JSR osasci
    RTS

.print_symbol
    LDY #1
    LDA (exp), Y
    JSR osasci
    INY
    LDA (exp), Y
    JSR osasci
    INY
    LDA (exp), Y
    JSR osasci
    RTS

.print_number
    LDY #1
    LDA (exp), Y
    JSR printDecimal
    RTS
